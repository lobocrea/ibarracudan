-- Configuración inicial completa para la base de datos de Supabase

-- Eliminar tablas existentes en el orden correcto para evitar errores de dependencia
DROP TABLE IF EXISTS "items_pedido";
DROP TABLE IF EXISTS "pedidos";
DROP TABLE IF EXISTS "productos";

-- 1. Tabla de Productos
CREATE TABLE "productos" (
    "id" uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    "code" text NOT NULL,
    "tipo" text,
    "quantity" integer NOT NULL DEFAULT 0,
    "buy_price" numeric NOT NULL DEFAULT 0,
    "sell_price" numeric NOT NULL DEFAULT 0
);

-- Habilitar RLS para la tabla de productos
ALTER TABLE "productos" ENABLE ROW LEVEL SECURITY;

-- Políticas para la tabla de productos
CREATE POLICY "Enable read access for all users" ON "productos"
AS PERMISSIVE FOR SELECT
TO public
USING (true);

CREATE POLICY "Enable insert for authenticated users" ON "productos"
AS PERMISSIVE FOR INSERT
TO authenticated
WITH CHECK (true);

CREATE POLICY "Enable update for authenticated users" ON "productos"
AS PERMISSIVE FOR UPDATE
TO authenticated
USING (true)
WITH CHECK (true);

CREATE POLICY "Enable delete for authenticated users" ON "productos"
AS PERMISSIVE FOR DELETE
TO authenticated
USING (true);


-- 2. Tabla de Pedidos
CREATE TABLE "pedidos" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "created_at" timestamp with time zone DEFAULT now() NOT NULL,
    "client_name" text,
    "total" numeric,
    "user_id" uuid DEFAULT auth.uid() REFERENCES auth.users(id)
);

-- Habilitar RLS para la tabla de pedidos
ALTER TABLE "pedidos" ENABLE ROW LEVEL SECURITY;

-- Políticas para la tabla de pedidos
CREATE POLICY "Enable read access for own orders" ON "pedidos"
AS PERMISSIVE FOR SELECT
TO authenticated
USING (auth.uid() = user_id);

CREATE POLICY "Enable insert for authenticated users" ON "pedidos"
AS PERMISSIVE FOR INSERT
TO authenticated
WITH CHECK (auth.uid() = user_id);


-- 3. Tabla de Items del Pedido (tabla intermedia)
CREATE TABLE "items_pedido" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "pedido_id" bigint NOT NULL REFERENCES "pedidos"(id) ON DELETE CASCADE,
    "producto_id" uuid NOT NULL REFERENCES "productos"(id),
    "quantity" integer NOT NULL,
    "sell_price" numeric NOT NULL
);

-- Habilitar RLS para la tabla de items_pedido
ALTER TABLE "items_pedido" ENABLE ROW LEVEL SECURITY;

-- Políticas para la tabla de items_pedido
CREATE POLICY "Enable read access for users who own the order" ON "items_pedido"
AS PERMISSIVE FOR SELECT
TO authenticated
USING (
  (SELECT user_id FROM pedidos WHERE id = pedido_id) = auth.uid()
);

CREATE POLICY "Enable insert for authenticated users" ON "items_pedido"
AS PERMISSIVE FOR INSERT
TO authenticated
WITH CHECK (
  (SELECT user_id FROM pedidos WHERE id = pedido_id) = auth.uid()
);


-- 4. Función para crear un nuevo pedido y actualizar el inventario
CREATE OR REPLACE FUNCTION public.handle_new_order(
  client_name text,
  order_items jsonb
)
RETURNS bigint
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  new_order_id bigint;
  order_total numeric := 0;
  item record;
  product_stock int;
  product_sell_price numeric;
BEGIN
  -- Calcular el total del pedido
  FOR item IN SELECT * FROM jsonb_to_recordset(order_items) AS x(producto_id uuid, quantity int)
  LOOP
    SELECT p.sell_price INTO product_sell_price
    FROM public.productos p WHERE p.id = item.producto_id;
    
    order_total := order_total + (item.quantity * product_sell_price);
  END LOOP;

  -- Crear el nuevo pedido
  INSERT INTO public.pedidos (client_name, total, user_id)
  VALUES (client_name, order_total, auth.uid())
  RETURNING id INTO new_order_id;

  -- Insertar los items del pedido y actualizar el stock
  FOR item IN SELECT * FROM jsonb_to_recordset(order_items) AS x(producto_id uuid, quantity int)
  LOOP
    -- Verificar stock antes de insertar
    SELECT p.quantity, p.sell_price INTO product_stock, product_sell_price
    FROM public.productos p WHERE p.id = item.producto_id;

    IF product_stock IS NULL THEN
      RAISE EXCEPTION 'Producto con ID % no encontrado', item.producto_id;
    END IF;

    IF product_stock < item.quantity THEN
      RAISE EXCEPTION 'Stock insuficiente para el producto ID %. Disponible: %, Solicitado: %', item.producto_id, product_stock, item.quantity;
    END IF;

    -- Insertar item en la tabla items_pedido
    INSERT INTO public.items_pedido (pedido_id, producto_id, quantity, sell_price)
    VALUES (new_order_id, item.producto_id, item.quantity, product_sell_price);

    -- Actualizar el inventario
    UPDATE public.productos
    SET quantity = quantity - item.quantity
    WHERE id = item.producto_id;
  END LOOP;

  RETURN new_order_id;
END;
$$;

-- 5. Insertar los datos de los productos
INSERT INTO "productos" ("code", "tipo", "quantity", "buy_price", "sell_price") VALUES
('CT-500 1H', 'LCL240-13 ( 500 mcm )', 100, 10, 20),
('CT-2 1H', 'LCL35-12 (2 AWG)', 100, 10, 20),
('CT-2/0 1H', 'LCL70-12 (2/0 AWG)', 100, 10, 20),
('CT-4/0 1H', 'LCL120-13 (4/0 AWG)', 100, 10, 20),
('CT-4 1H', 'LCL25-6 (4 AWG)', 100, 10, 20),
('CT-8 1H', 'LCL10-6 (8 AWG)', 100, 10, 20),
('CT-250 1H', 'LCL120-13 ( 250 mcm)', 100, 10, 20),
('CT-6 1H', 'LCL16-6 (6 AWG)', 100, 10, 20),
('CT-1/0 1H', 'LCL50-12 (1/0 AWG)', 100, 10, 20),
('CT-350 1H', 'LCL185-13 ( 350 mcm)', 100, 10, 20),
('CT-4/0 2H', 'TTL120-13 (4/0 AWG)', 100, 10, 20),
('PTNB 10-12', '(AWG 8)', 100, 10, 20),
('CT-500 2H', 'TTL240-13 ( 500 mcm)', 100, 10, 20),
('PTNB 16-13', '(AWG 6)', 100, 10, 20),
('CT-350 2H', 'TTL185-13 ( 350 mcm)', 100, 10, 20),
('2-T', 'GTY35', 100, 10, 20),
('CT-2/0 2H', 'TTL70-12 (2/0 AWG)', 100, 10, 20),
('CT-250 2H', 'TTL120-13 ( 250 mcm)', 100, 10, 20),
('CT-3/0 1H', 'LCL95-12 (3/0 AWG)', 100, 10, 20),
('500-T', 'GTY240', 100, 10, 20),
('CT-750 2H', 'TTL400-13 ( 750 mcm)', 100, 10, 20),
('CT-1000 2H', 'TTL500-13 ( 1000 mcm)', 100, 10, 20),
('6-T', 'GTY16', 100, 10, 20),
('4-T', 'GTY25', 100, 10, 20),
('CT-1/0 2H', 'TTL50-12 (1/0 AWG)', 100, 10, 20),
('2/0-T', 'GTY70', 100, 10, 20),
('1/0-T', 'GTY50', 100, 10, 20),
('CT-2 2H', 'TTL35-12 (2 AWG)', 100, 10, 20),
('250-T', 'GTY150', 100, 10, 20),
('YQK-300', 'PRENSA YQK-300', 100, 10, 20),
('350-T', 'GTY185', 100, 10, 20),
('4/0-T', 'GTY120', 100, 10, 20),
('8-T', 'GTY10', 100, 10, 20),
('HX-50B', 'PRENSA HX-50B', 100, 10, 20),
('HS-D1', 'PELA CABLE HS-D1', 100, 10, 20),
('CT-750 1H', 'LCL400-13 ( 750 mcm)', 100, 10, 20),
('J52', 'CORTA CABLE - J52', 100, 10, 20),
('EB-630', 'Electric Hydraulic Crimping tool', 100, 10, 20),
('CT-1000 1H', 'LCL500-13 ( 1000 mcm)', 100, 10, 20),
('3/0-T', 'GTY95', 100, 10, 20),
('SYK-15', 'PONCHADORA SYK-15', 100, 10, 20),
('CTC-350', 'YAL185 (350MCM)', 100, 10, 20),
('CTC-500', 'YAL240 (500MCM)', 100, 10, 20),
('PTNB 25-15', '(AWG 4)', 100, 10, 20),
('PTNB 35-20', '(AWG 2)', 100, 10, 20),
('CT-3/0 2H', 'TTL95-12 (3/0 AWG)', 100, 10, 20);
